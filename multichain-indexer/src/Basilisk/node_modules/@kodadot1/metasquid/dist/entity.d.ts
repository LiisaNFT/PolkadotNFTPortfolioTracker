import { FindOptionsWhere, FindOptionsRelations, Repository } from 'typeorm';
import { Store, EntityConstructor } from './types.js';
import '@subsquid/substrate-processor';

type EntityWithId = {
    id: string;
};
declare function createOrElseThrow<T extends EntityWithId>(store: Store, entityConstructor: EntityConstructor<T>, id: string, init: Partial<T>): Promise<T>;
/**
 * Get or Create the provided entity with the given ID
 *
 * Note: you need to persist/save the entity yourself
 */
declare function getOrCreate<T extends EntityWithId>(store: Store, entityConstructor: EntityConstructor<T>, id: string, init: Partial<T>): Promise<T>;
declare function get<T extends EntityWithId>(store: Store, entityConstructor: EntityConstructor<T>, id: string): Promise<T | null>;
declare function getOptional<T extends EntityWithId>(store: Store, entityConstructor: EntityConstructor<T>, id: string): Promise<T | null>;
declare function getOrFail<T extends EntityWithId>(store: Store, entityConstructor: EntityConstructor<T>, id: string): Promise<T>;
declare function getWhere<T extends EntityWithId>(store: Store, entityConstructor: EntityConstructor<T>, id: string, where: FindOptionsWhere<T>): Promise<T>;
declare function create<T extends EntityWithId>(entityConstructor: EntityConstructor<T>, id: string, init: Partial<T>): T;
declare function findOneWithJoin<T extends EntityWithId>(store: Store, entityConstructor: EntityConstructor<T>, id: string, relations?: FindOptionsRelations<T>): Promise<T | null>;
declare function findByIdList<T extends EntityWithId>(store: Store, entityConstructor: EntityConstructor<T>, idList: Iterable<string>): Promise<T[]>;
declare function findByIdListAsMap<T extends EntityWithId>(store: Store, entityConstructor: EntityConstructor<T>, idList: Iterable<string>): Promise<Map<string, T>>;
declare function findByRawQuery<T extends EntityWithId>(store: Store, entityConstructor: EntityConstructor<T>, query: string, args?: any[]): Promise<T[]>;
declare function has<T extends EntityWithId>(store: Store, entityConstructor: EntityConstructor<T>, idOrOptions: string | FindOptionsWhere<T>): Promise<boolean>;
declare function genericRepositoryQuery<T extends EntityWithId, V>(repository: Repository<T>, query: string, args?: any[]): Promise<V>;

export { EntityWithId, create, createOrElseThrow, findByIdList, findByIdListAsMap, findByRawQuery, findOneWithJoin, genericRepositoryQuery, get, getOptional, getOrCreate, getOrFail, getWhere, has };

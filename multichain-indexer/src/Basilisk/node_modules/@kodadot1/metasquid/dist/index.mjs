export { a as ensure, e as eventFrom, m as metadataOf, h as takeFirst, b as toBaseBlock, t as toBaseCall, g as toEntity, d as toEntityId, c as toMap, f as toUniqueSet } from './shared/metasquid.4a3018bb.mjs';
import * as ss58 from '@subsquid/ss58';
import { decodeHex } from '@subsquid/substrate-processor';
export { camelCase } from 'scule';

const serializer = (_, value) => typeof value === "bigint" ? value.toString() : value;

let prefix = "kusama";
function addressOf(address) {
  const value = typeof address === "string" ? decodeHex(address) : address;
  if (!value) {
    return "";
  }
  return ss58.codec(prefix).encode(value);
}
const SquidUtils = (chain) => {
  prefix = chain ?? prefix;
  return {
    addressOf
  };
};

export { SquidUtils, serializer };

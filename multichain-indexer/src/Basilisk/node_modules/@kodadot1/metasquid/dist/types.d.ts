import { CommonHandlerContext } from '@subsquid/substrate-processor';
import { EntityManager } from 'typeorm';

type EntityWithId = {
    id: string;
};
type BurnableEntity = EntityWithId & {
    burned: boolean;
};
type WithCaller = {
    caller: string;
};
type WithTimestamp = {
    timestamp: Date;
};
type WithBlockNumber<T = string> = {
    blockNumber: T;
};
type BaseBlock = WithTimestamp & WithBlockNumber;
type BaseCall = BaseBlock & WithCaller;
type IEvent<T> = WithCaller & WithTimestamp & WithBlockNumber<bigint> & {
    interaction: T;
    currentOwner: string;
    meta: string;
};
type EntityConstructor<T> = {
    new (...args: any[]): T;
};
type Store = EntityManager;
type BaseContext = CommonHandlerContext<Store>;
type Optional<T> = T | undefined | null;
type CallWith<T> = BaseCall & T;
type ArchiveCall<T = any> = {
    __kind: string;
    value: T;
};
type ItemKind = 'evmLog' | 'event' | 'transaction' | 'call';
type ItemWithKind = {
    kind: ItemKind;
};
type ArchiveCallWithOptionalValue = ArchiveCall<Optional<any>>;
declare enum DisplayType {
    null = 0,
    'boost_number' = 1,
    'number' = 2,
    'boost_percentage' = 3
}
type MetadataAttribute = {
    display_type?: DisplayType;
    trait_type?: string;
    value: number | string;
};
type TokenMetadata = {
    name?: string;
    description: string;
    external_url?: string;
    image: string;
    animation_url?: string;
    attributes?: MetadataAttribute[];
    mediaUri?: string;
    type?: string;
    thumbnailUri?: string;
};

export { ArchiveCall, ArchiveCallWithOptionalValue, BaseBlock, BaseCall, BaseContext, BurnableEntity, CallWith, DisplayType, EntityConstructor, EntityWithId, IEvent, ItemKind, ItemWithKind, MetadataAttribute, Optional, Store, TokenMetadata, WithBlockNumber, WithCaller, WithTimestamp };

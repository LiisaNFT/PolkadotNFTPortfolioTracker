'use strict';

const shared = require('./shared/metasquid.26b5e105.cjs');
const ss58 = require('@subsquid/ss58');
const substrateProcessor = require('@subsquid/substrate-processor');
const scule = require('scule');

function _interopNamespaceDefault(e) {
  const n = Object.create(null);
  if (e) {
    for (const k in e) {
      n[k] = e[k];
    }
  }
  n.default = e;
  return n;
}

const ss58__namespace = /*#__PURE__*/_interopNamespaceDefault(ss58);

const serializer = (_, value) => typeof value === "bigint" ? value.toString() : value;

let prefix = "kusama";
function addressOf(address) {
  const value = typeof address === "string" ? substrateProcessor.decodeHex(address) : address;
  if (!value) {
    return "";
  }
  return ss58__namespace.codec(prefix).encode(value);
}
const SquidUtils = (chain) => {
  prefix = chain ?? prefix;
  return {
    addressOf
  };
};

exports.ensure = shared.ensure;
exports.eventFrom = shared.eventFrom;
exports.metadataOf = shared.metadataOf;
exports.takeFirst = shared.takeFirst;
exports.toBaseBlock = shared.toBaseBlock;
exports.toBaseCall = shared.toBaseCall;
exports.toEntity = shared.toEntity;
exports.toEntityId = shared.toEntityId;
exports.toMap = shared.toMap;
exports.toUniqueSet = shared.toUniqueSet;
exports.camelCase = scule.camelCase;
exports.SquidUtils = SquidUtils;
exports.serializer = serializer;

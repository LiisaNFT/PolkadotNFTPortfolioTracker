import { BatchBlock, SubstrateBlock } from '@subsquid/substrate-processor';
import { BaseCall, IEvent, BaseContext, BaseBlock, EntityWithId, EntityConstructor } from './types.js';
export { camelCase } from 'scule';
import 'typeorm';

declare const serializer: (_: unknown, value: unknown) => unknown;

declare function eventFrom<T>(interaction: T, { blockNumber, caller, timestamp }: BaseCall, meta: string, currentOwner?: string): IEvent<T>;
declare function toBaseCall(context: BaseContext): BaseCall;
declare function ensure<T>(value: any): T;
declare function metadataOf({ metadata }: {
    metadata?: string;
}): string;
declare function toBaseBlock(context: BatchBlock<any>): BaseBlock;
declare function toBaseBlock(context: BaseContext): BaseBlock;
declare function toBaseBlock(context: SubstrateBlock): BaseBlock;
declare function toMap<T extends EntityWithId>(array: T[]): Map<string, T>;
declare function toEntityId<T extends EntityWithId>(item: T): string;
declare function toUniqueSet<T extends EntityWithId>(array: T[]): Set<string>;
declare function toEntity<T>(entityConstructor: EntityConstructor<T>, el: any): T;
declare function takeFirst<T>(list: T[]): T | undefined;

declare function addressOf(address: Uint8Array | string): string;
declare const SquidUtils: (chain?: string) => {
    addressOf: typeof addressOf;
};

export { SquidUtils, ensure, eventFrom, metadataOf, serializer, takeFirst, toBaseBlock, toBaseCall, toEntity, toEntityId, toMap, toUniqueSet };

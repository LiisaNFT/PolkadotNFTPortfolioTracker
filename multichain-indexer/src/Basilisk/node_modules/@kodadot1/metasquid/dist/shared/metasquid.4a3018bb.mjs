import { camelCase } from 'scule';

function eventFrom(interaction, { blockNumber, caller, timestamp }, meta, currentOwner) {
  return {
    interaction,
    blockNumber: BigInt(blockNumber),
    caller,
    currentOwner: currentOwner ?? caller,
    timestamp,
    meta
  };
}
function toBaseCall(context) {
  const caller = "";
  const { blockNumber, timestamp } = toBaseBlock(context);
  return { caller, blockNumber, timestamp };
}
function ensure(value) {
  return value;
}
function metadataOf({ metadata }) {
  return metadata ?? "";
}
function toBaseBlock(context) {
  const blockFrom = () => {
    if ("block" in context) {
      return context.block;
    }
    if ("header" in context) {
      return context.header;
    }
    return context;
  };
  const block = blockFrom();
  const blockNumber = block.height.toString();
  const timestamp = new Date(block.timestamp);
  return { blockNumber, timestamp };
}
function toMap(array) {
  return new Map(array.map((item) => [item.id, item]));
}
function toEntityId(item) {
  return item.id;
}
function toUniqueSet(array) {
  return new Set(array.map(toEntityId));
}
function toEntity(entityConstructor, el) {
  const entity = new entityConstructor();
  for (const prop in el) {
    entity[camelCase(prop)] = el[prop];
  }
  return entity;
}
function takeFirst(list) {
  return list.at(0);
}

export { ensure as a, toBaseBlock as b, toMap as c, toEntityId as d, eventFrom as e, toUniqueSet as f, toEntity as g, takeFirst as h, metadataOf as m, toBaseCall as t };

type Block @entity {
    id: ID!
    number: Int! @index
    timestamp: DateTime! @index
}

type Transaction @entity {
    id: ID!
    blockNumber: Int @index
    blockTimestamp: DateTime! @index
    hash: String! @index
    to: String @index
    from: String @index
    status: Int @index
}

type ContractEventBuy @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    eventName: String! @index
    saleId: BigInt! @index
    tokenId: BigInt!
    buyer: String!
    price: BigInt!
    tipsFee: BigInt!
    currency: String!
}

type ContractEventCancelSell @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    eventName: String! @index
    saleId: BigInt! @index
    tokenId: BigInt!
}

type ContractEventNftReceived @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    eventName: String! @index
    operator: String!
    from: String!
    tokenId: BigInt!
    data: String!
}

type ContractEventOwnershipTransferred @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    eventName: String! @index
    previousOwner: String! @index
    newOwner: String! @index
}

type ContractEventSell @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    eventName: String! @index
    saleId: BigInt! @index
    tokenId: BigInt!
    nft: String!
    currency: String!
    seller: String!
    buyer: String!
    startTime: BigInt!
    price: BigInt!
}

type ContractFunctionAddSupportedCurrency @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    functionName: String! @index
    functionValue: BigInt
    functionSuccess: Boolean @index
    currencyAddress: String!
}

type ContractFunctionAddSupportedNft @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    functionName: String! @index
    functionValue: BigInt
    functionSuccess: Boolean @index
    nftAddress: String!
}

type ContractFunctionBuy @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    functionName: String! @index
    functionValue: BigInt
    functionSuccess: Boolean @index
    tokenId: BigInt!
    nftAddress: String!
    currency: String!
    price: BigInt!
}

type ContractFunctionCancelSell @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    functionName: String! @index
    functionValue: BigInt
    functionSuccess: Boolean @index
    tokenId: BigInt!
    nftAddress: String!
}

type ContractFunctionEnableSales @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    functionName: String! @index
    functionValue: BigInt
    functionSuccess: Boolean @index
    salesEnabled: Boolean!
}

type ContractFunctionOnErc721Received @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    functionName: String! @index
    functionValue: BigInt
    functionSuccess: Boolean @index
    operator: String!
    from: String!
    tokenId: BigInt!
    data: String!
}

type ContractFunctionRemoveSupportedCurrency @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    functionName: String! @index
    functionValue: BigInt
    functionSuccess: Boolean @index
    currencyAddress: String!
}

type ContractFunctionRemoveSupportedNft @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    functionName: String! @index
    functionValue: BigInt
    functionSuccess: Boolean @index
    nftAddress: String!
}

type ContractFunctionRenounceOwnership @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    functionName: String! @index
    functionValue: BigInt
    functionSuccess: Boolean @index
}

type ContractFunctionSell @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    functionName: String! @index
    functionValue: BigInt
    functionSuccess: Boolean @index
    tokenId: BigInt!
    price: BigInt!
    nftAddress: String!
    currency: String!
}

type ContractFunctionSetFeeRate @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    functionName: String! @index
    functionValue: BigInt
    functionSuccess: Boolean @index
    rate: BigInt!
}

type ContractFunctionSetFeeReceiver @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    functionName: String! @index
    functionValue: BigInt
    functionSuccess: Boolean @index
    walletAddress: String!
}

type ContractFunctionTransferOwnership @entity {
    id: ID!
    blockNumber: Int! @index
    blockTimestamp: DateTime! @index
    transactionHash: String! @index
    contract: String! @index
    functionName: String! @index
    functionValue: BigInt
    functionSuccess: Boolean @index
    newOwner: String!
}

